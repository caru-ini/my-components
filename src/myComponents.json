{
  "datePicker": {
    "name": "datePicker",
    "code": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport * as chrono from 'chrono-node/ja';\nimport { format } from 'date-fns';\nimport { ja } from 'date-fns/locale';\nimport { CalendarIcon } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function DatePicker() {\n  const [date, setDate] = useState<Date | null>(null);\n\n  const handleManualInput = (input: string) => {\n    const parsed = chrono.parse(\n      input,\n      { instant: new Date() },\n      {\n        forwardDate: true,\n      },\n    );\n    if (parsed.length > 0) {\n      const parsedDate = parsed[0].start.date();\n      setDate(parsedDate);\n      return;\n    }\n    setDate(null);\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant='outline' className='w-[280px] justify-start text-left font-normal'>\n          <CalendarIcon className='mr-2 size-4' />\n          {date ? format(date, 'PPP', { locale: ja }) : <span>日付を選択</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className='flex flex-col gap-2'>\n        <Input\n          type='text'\n          placeholder='日付や時間を入力（例：明日、来週金曜日、3時）'\n          onChange={(e) => handleManualInput(e.target.value)}\n        />\n        <p className='rounded-md bg-secondary p-2 font-mono'>\n          {date\n            ? `${format(date, 'PPP', { locale: ja })} ${format(date, 'HH:mm', { locale: ja })}`\n            : 'Unknown'}\n        </p>\n      </PopoverContent>\n    </Popover>\n  );\n}\n"
  },
  "kaiwai": {
    "name": "kaiwai",
    "code": "'use client';\nimport { useEffect, useState } from 'react';\n\nconst numbers = [4, 3, 2, 1, 8, 7, 6, 5];\nconst barHeight = 10;\nconst barWidth = 30;\nconst verticalSpacing = 10;\nconst horizontalSpacing = 8;\nconst numRows = 4;\nconst numCols = Math.ceil(numbers.length / numRows);\n\nconst svgWidth = numCols * (barWidth + horizontalSpacing) - horizontalSpacing;\nconst svgHeight = numRows * (barHeight + verticalSpacing) - verticalSpacing;\n\nexport const Kaiwai = () => {\n  const [visibleCount, setVisibleCount] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setVisibleCount((prevCount) => {\n        const updatedVisibleCount = (prevCount % numbers.length) + 1;\n        return updatedVisibleCount;\n      });\n    }, 53);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className='flex'>\n      <svg width={svgWidth} height={svgHeight} fill='white'>\n        {numbers.map((number, index) => {\n          const col = Math.floor(index / numRows);\n          const row = numRows - 1 - (index % numRows);\n          const y = row * (barHeight + verticalSpacing);\n          const x = col * (barWidth + horizontalSpacing);\n          const isVisible = index < visibleCount;\n\n          return (\n            <g key={number} className={isVisible ? 'visible' : 'hidden'}>\n              <rect x={x} y={y} height={barHeight} width={barWidth} fill='white' />\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\n"
  },
  "logo": {
    "name": "logo",
    "code": "import { cn } from '@/lib/utils';\nimport { Terminal } from 'lucide-react';\n\nimport { Source_Code_Pro } from 'next/font/google';\n\nconst sourceCodePro = Source_Code_Pro({ subsets: ['latin'] });\n\nexport const Logo: React.FC = () => {\n  return (\n    <div\n      className={cn(\n        sourceCodePro.className,\n        'text-primary-500 dark:text-primary-400 flex items-center gap-x-1 rounded-lg border-2 border-blue-400 bg-secondary px-2 text-2xl',\n      )}\n    >\n      <Terminal size={25} />\n      caru.live\n    </div>\n  );\n};\n"
  },
  "statusCard": {
    "name": "statusCard",
    "code": "import { cn } from '@/lib/utils';\n\ntype Status = 'success' | 'warning' | 'error';\n\ntype StatusCardProps = {\n  icon: JSX.Element;\n  title: string;\n  status: Status;\n  description?: string;\n};\n\nexport const StatusCard: React.FC<StatusCardProps> = ({ icon, title, status, description }) => {\n  return (\n    <div className='flex items-center rounded-md border border-border p-2'>\n      <div className='size-full rounded-sm border border-border p-2'>{icon}</div>\n      <div className='ml-2 flex flex-col justify-center'>\n        <h2>{title}</h2>\n        <div className='flex items-center justify-between gap-x-1'>\n          <Indicator status={status} />\n          <p className='text-sm text-muted-foreground'>{description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Indicator: React.FC<{ status: Status }> = ({ status }) => {\n  const innerStatusStyles = {\n    success: 'bg-green-600',\n    warning: 'bg-yellow-600',\n    error: 'bg-red-600',\n  };\n\n  const outerStatusStyles = {\n    success: 'bg-green-300',\n    warning: 'bg-yellow-300',\n    error: 'bg-red-300',\n  };\n  return (\n    <div>\n      <div\n        className={cn(\n          `flex size-3 items-center justify-center rounded-full`,\n          outerStatusStyles[status],\n        )}\n      >\n        <div className={cn(`size-2 rounded-full`, innerStatusStyles[status])} />\n      </div>\n    </div>\n  );\n};\n"
  },
  "tagPicker": {
    "name": "tagPicker",
    "code": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport React, { useState } from 'react';\n\ntype tagPickerProps = {\n  tags: string[];\n  onChange?: (tags: string[]) => void;\n  defaultTags: string[];\n  onAddTag?: (tag: string) => void;\n  className?: string;\n};\n\nexport const TagPicker: React.FC<tagPickerProps> = ({ tags, defaultTags, onChange, className }) => {\n  const [selectedTags, setSelectedTags] = useState<string[]>(defaultTags);\n  const handleTagClick = (tag: string) => {\n    if (selectedTags.includes(tag)) {\n      setSelectedTags(selectedTags.filter((selectedTag) => selectedTag !== tag));\n    } else {\n      setSelectedTags([...selectedTags, tag]);\n    }\n    onChange?.(selectedTags);\n  };\n  return (\n    <div className={cn('flex gap-2', className)}>\n      {tags.map((tag) => (\n        <Tag\n          key={tag}\n          name={tag}\n          onClick={() => handleTagClick(tag)}\n          checked={selectedTags.includes(tag)}\n        />\n      ))}\n    </div>\n  );\n};\n\ntype tagProps = {\n  name: string;\n  onClick: () => void;\n  checked?: boolean;\n  className?: string;\n};\n\nexport const Tag: React.FC<tagProps> = ({ name, className, onClick, checked }) => {\n  return (\n    <button\n      type='button'\n      className={cn(\n        `select-none rounded-md border border-border px-2 py-1 transition-colors duration-300 hover:bg-none`,\n        checked ? 'bg-primary text-primary-foreground' : '',\n        className,\n      )}\n      onClick={onClick}\n    >\n      {name}\n    </button>\n  );\n};\n"
  },
  "toggletheme": {
    "name": "toggletheme",
    "code": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { MoonIcon, SunIcon } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { useEffect, useState } from 'react';\n\ninterface ToggleThemeProps {\n  variant?:\n    | 'default'\n    | 'destructive'\n    | 'outline'\n    | 'secondary'\n    | 'ghost'\n    | 'link'\n    | null\n    | undefined;\n  className?: string;\n}\n\nconst ToggleTheme = ({ variant = 'default', className }: ToggleThemeProps) => {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => setMounted(true), []);\n\n  return (\n    <Button\n      variant={variant}\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n      className={className}\n    >\n      {mounted && theme === 'dark' ? <SunIcon /> : <MoonIcon />}\n    </Button>\n  );\n};\n\nexport default ToggleTheme;\n"
  }
}
